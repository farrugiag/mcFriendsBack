#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("backend:server");
var http = require("http");
const UserModel = require("../models/users");
const MessageModel = require("../models/messages");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require("socket.io")(server);

io.on("connection", function (socket) {
  // console.log("a user is connected");
  socket.on("sendMessage", async function (message) {
    console.log(">>message", message);
    const searchUserEmetteur = await UserModel.findOne({
      token: message.tokenEmetteur,
    });
    const searchUserRecepteur = await UserModel.findOne({
      token: message.tokenRecepteur,
    });
    // console.log(">>searchUserEmetteur", searchUserEmetteur);
    // console.log(">>searchUserRecepteur", searchUserRecepteur);
    const datePost = new Date();
    // const datePost = new Date("2021-09-03 07:03:00");
    // console.log("datePost", datePost);

    const newMessage = new MessageModel({
      emetteur: searchUserEmetteur._id,
      recepteur: searchUserRecepteur._id,
      message: message.message,
      date: datePost,
    });

    const newMessageSaved = await newMessage.save();
    // console.log(">>newMessageSaved", newMessageSaved);
    let dateHours = newMessageSaved.date.getHours();
    if (dateHours < 10) {
      dateHours = `0${dateHours}`;
    }

    let dateMinutes = newMessageSaved.date.getMinutes();
    if (dateMinutes < 10) {
      dateMinutes = `0${dateMinutes}`;
    }
    const dateWeek = newMessageSaved.date.toLocaleDateString();
    // console.log(">>date", dateWeek);
    const dataMessage = {
      message: message.message,
      user: searchUserEmetteur.prenom,
      dateHours: dateHours,
      dateMinutes: dateMinutes,
      dateWeek: dateWeek,
    };
    io.emit("sendMessageFromBack", dataMessage);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
